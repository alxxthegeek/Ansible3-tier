---
# tasks file for ec2_base

- name: Create a new EC2 key
  ec2_key:
    name: "{{ keypair }}"
    region: "{{ region }}"
  register: ec2_key_result

- name: Save private key
  copy: content="{{ ec2_key_result.key.private_key }}" dest="~/.ssh/{{ keypair }}.pem" mode=0600
  when: ec2_key_result.changed

- name: Create VPC
  local_action: 
    module: ec2_vpc_net
    region: "{{ vpc_region }}"
    state: present
    name: "{{ vpc_name }}"
    resource_tags: { "Name":"{{ vpc_name }}-vpc" }
    cidr_block: "{{ vpc_cidr }}"
  register: vpc

- name: Set VPC ID in variable
  set_fact:
    vpc_id: "{{ vpc.vpc.id }}"  

- name: Create Public Subnets
  local_action: 
    module: ec2_vpc_subnet
    state: present
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ item.subnet }}"
    az: "{{ item.az }}"
    region: "{{ vpc_region }}"
  with_items:
    - "{{ vpc_public_net1 }}"
    - "{{ vpc_public_net2 }}"  
    - "{{ vpc_public_net3 }}"  
  register: subnet_info

- name: Get subnet info
  local_action: 
    module: ec2_vpc_subnet_info
    filters:
      vpc-id: "{{ vpc_id }}"
  register: subnet_data    

- name: test1
  debug:    
    msg: "{{ (subnet_data.subnets |  selectattr('availability_zone', 'search', 'ap-southeast-2a') | list | first).id }}"  

- name: test2
  debug:    
    msg: "{{ (subnet_data.subnets |  selectattr('availability_zone', 'search', 'ap-southeast-2b') | list | first).id }}"  
    
- name: test3
  debug:    
    msg: "{{ (subnet_data.subnets |  selectattr('availability_zone', 'search', 'ap-southeast-2c') | list | first).id }}"       

- name: Set public_subnet_1 as variable
  set_fact:
    public_subnet_1:  "{{ (subnet_data.subnets |  selectattr('availability_zone', 'search', 'ap-southeast-2a') | list | first).id }}"

- name: Set public_subnet_2 as variable
  set_fact:
    public_subnet_2:  "{{ (subnet_data.subnets |  selectattr('availability_zone', 'search', 'ap-southeast-2b') | list | first).id }}"

- name: Set public_subnet_3 as variable
  set_fact:
    public_subnet_3:  "{{ (subnet_data.subnets |  selectattr('availability_zone', 'search', 'ap-southeast-2c') | list | first).id }}"    

- name: Create IGW
  ec2_vpc_igw:
   vpc_id: "{{ vpc_id }}"
   region: "{{ region }}"
   state: "present"
   tags:
     Name: "{{ igw_name }}"
  register: igw  

- name: Create IGW Routes
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    subnets:
      - "{{ public_subnet_1 }}"
      - "{{ public_subnet_2 }}"
      - "{{ public_subnet_3 }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id  }}"
    tags:
     Name: 
       - "{{ route_name }}"
       - "Public"

- name: Create a security group
  local_action: 
    module: ec2_group
    name: "{{ vpc_name }}-{{ security_group_name }}"
    description: Security Group for Web Servers
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: security_group

- name: Create ELB Security Group
  local_action: 
    module: ec2_group
    name:  "{{ vpc_name }}-Public-ELB SG"
    description: "{{ vpc_name }}-Public-ELB security group "
    vpc_id: "{{ vpc_id }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0  
  register: elb_sec_group    
  
- name: create_elb Set the elb security group id as facts
  set_fact:
    elb_security_group: "{{ elb_sec_group.group_id }}"

- name: Create the ELB only listening over port 80
  ec2_elb_lb:
    name: "{{ vpc_name }}-WebServer-elb"
    security_group_ids: "{{ elb_security_group }}"
    state: present
    region: "{{ region }}"
    purge_subnets: yes
    cross_az_load_balancing: "{{ elb_cross_az_load_balancing }}"
    connection_draining_timeout: "{{ elb_connection_draining_timeout }}"
    subnets: 
      - "{{ public_subnet_1 }}"
      - "{{ public_subnet_2 }}"
      - "{{ public_subnet_3 }}"
    listeners:
    - protocol: http
      load_balancer_port: 80
      instance_protocol: http
      instance_port: 80
    health_check:
      ping_protocol: "{{ elb_ping_protocol }}"
      ping_port: "{{ elb_ping_port }}"
      response_timeout: "{{ elb_response_timeout }}"
      interval: "{{ elb_interval }}"
      unhealthy_threshold: "{{ elb_unhealthy_threshold }}"
      healthy_threshold: "{{ elb_healthy_threshold }}"
  register: webserver_elb 
  
- name: Launch the new EC2 Instance
  local_action: 
    module: ec2
    image: "{{ image }}"
    instance_type: "{{ instance_type }}"
    region: "{{ region }}"
    group_id:
      - "{{ security_group.group_id }}"
      - "{{ elb_security_group }}"
    wait: yes
    instance_tags:
          application: "{{ vpc_name }}-public-webserver"
    keypair: "{{ keypair }}"
    monitoring: yes
    count: "{{ webServerCount }}"
    vpc_subnet_id: "{{ item }} "
  with_items:
    - "{{ public_subnet_1 }}"
    - "{{ public_subnet_2 }}"
    - "{{ public_subnet_3 }}"
  register: ec2

- name: Wait for SSH to come up
  delegate_to: "{{ item.public_dns_name }}"
  wait_for_connection:
    delay: 60
    timeout: 320
  loop: "{{ ec2.instance_ids }}"

- name: accept new ssh fingerprints
  shell: ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts
  with_items: "{{ ec2.instances }}"    

- name: Add tag to Instance(s)
  local_action: 
    module: ec2_tag
    resource: "{{ item.id }}"
    region: "{{ region }}"
    state: present
    tags:
      Name: "webserver"
  with_items: "{{ ec2.instance_ids }}"

- name: Add host to inventory
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: launched
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
    ansible_ssh_user: "{{ ansible_ssh_user }}"
  loop: "{{ ec2.instances }}"  

- name: Add each EC2 instance to the ELB
  ec2_elb:
    state: present
    ec2_elbs: "{{ loadbalancer_name }}"
    region: "{{ region }}"
    instance_id: "{{ item.id }}"
  with_items: "{{ ec2.instances }}"