---
# tasks file for ec2_instance

- name: Launch the new EC2 Instance 
  local_action: 
    module: ec2
    image: "{{ image }}"
    instance_type: "{{ instance_type }}"
    region: "{{ region }}"
    group: ["{{ vpc_name}}-internal-web", "{{ vpc_name }}-vpc-ssh", "{{ vpc_name }}-vpc-outbound"]
    wait: yes
    wait_timeout: 500
    instance_tags:
          Application: "{{ vpc_name }}-public-webserver"
          Name: "webserver"
    keypair: "{{ keypair }}"
    monitoring: yes
    count: "{{ webServerCount }}"
    vpc_subnet_id: "{{ public_subnet_1 }}"
    assign_public_ip: yes
  register: ec2
  
- name: Wait for SSH to come up
  delegate_to: "{{ item.public_dns_name }}"
  wait_for_connection:
    delay: 60
    timeout: 320
  with_items: "{{ ec2.instances }}"

- name: accept new ssh fingerprints
  shell: ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts
  with_items: "{{ ec2.instances }}"    

- name: Add host to inventory
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: launched
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
    ansible_ssh_user: "{{ ansible_ssh_user }}"
  loop: "{{ ec2.instances }}"  
  
- name: Add each EC2 instance to the ELB
  local_action:
      module: ec2_elb
      state: present
      ec2_elbs: "{{ webserver_elb.elb.name }}"
      region: "{{ region }}"
      instance_id: "{{ item.id }}"
      wait: no
  with_items: "{{ ec2.instances }}"  

- name: Launch the new EC2 Instance 
  local_action: 
    module: ec2
    image: "{{ image }}"
    instance_type: "{{ instance_type }}"
    region: "{{ region }}"
    group: ["{{ vpc_name}}-internal-web", "{{ vpc_name }}-vpc-ssh", "{{ vpc_name }}-vpc-outbound"]
    wait: yes
    wait_timeout: 500
    instance_tags:
          Application: "{{ vpc_name }}-public-webserver"
          Name: "webserver"
    keypair: "{{ keypair }}"
    monitoring: yes
    count: "{{ webServerCount }}"
    vpc_subnet_id: "{{ public_subnet_2 }}"
    assign_public_ip: yes
  register: ec2
  
- name: Wait for SSH to come up
  delegate_to: "{{ item.public_dns_name }}"
  wait_for_connection:
    delay: 60
    timeout: 320
  with_items: "{{ ec2.instances }}"

- name: accept new ssh fingerprints
  shell: ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts
  with_items: "{{ ec2.instances }}"    

- name: Add host to inventory
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: launched
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
    ansible_ssh_user: "{{ ansible_ssh_user }}"
  loop: "{{ ec2.instances }}"  
  
- name: Add each EC2 instance to the ELB
  local_action:
      module: ec2_elb
      state: present
      ec2_elbs: "{{ webserver_elb.elb.name }}"
      region: "{{ region }}"
      instance_id: "{{ item.id }}"
      wait: no
  with_items: "{{ ec2.instances }}"  
  
- name: Launch the new EC2 Instance 
  local_action: 
    module: ec2
    image: "{{ image }}"
    instance_type: "{{ instance_type }}"
    region: "{{ region }}"
    group: ["{{ vpc_name}}-internal-web", "{{ vpc_name }}-vpc-ssh", "{{ vpc_name }}-vpc-outbound"]
    wait: yes
    wait_timeout: 500
    instance_tags:
          Application: "{{ vpc_name }}-public-webserver"
          Name: "webserver"
    keypair: "{{ keypair }}"
    monitoring: yes
    count: "{{ webServerCount }}"
    vpc_subnet_id: "{{ public_subnet_3 }}"
    assign_public_ip: yes
  register: ec2
  
- name: Wait for SSH to come up
  delegate_to: "{{ item.public_dns_name }}"
  wait_for_connection:
    delay: 60
    timeout: 320
  with_items: "{{ ec2.instances }}"

- name: accept new ssh fingerprints
  shell: ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts
  with_items: "{{ ec2.instances }}"    

- name: Add host to inventory
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: launched
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
    ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file }}"
    ansible_ssh_user: "{{ ansible_ssh_user }}"
  loop: "{{ ec2.instances }}"  
  
- name: Add each EC2 instance to the ELB
  local_action:
      module: ec2_elb
      state: present
      ec2_elbs: "{{ webserver_elb.elb.name }}"
      region: "{{ region }}"
      instance_id: "{{ item.id }}"
      wait: no
  with_items: "{{ ec2.instances }}"  
  